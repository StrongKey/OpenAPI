openapi: 3.0.0
info:
  title: Data Tokenization API
  version: 4.0.0
  description: |
    The Data Tokenization API provides encryption capabilities for the secure storage and management of
    sensitive information.

    All API calls require a cryptographic domain ID ("did"). Cryptographic domains provide a method of cryptographically
    separating encrypted data. Each domain uses a different set of encryption keys, uses a different set of credentials,
    and can be configured separately to have different behaviors.

    All web services require a set of valid credentials. These credentials provide administrators the ability to restrict
    access to sensitive information. The default credentials for demo applications have the usernames "encrypt", "decrypt",
    "encryptdecrypt", "pinguser", and "all". The usernames describe the web services these credentials are authorized to use.
    They all have the password "Abcd1234!" for demo purposes.
  license:
    name: GNU LGPL 2.1+
    url: 'http://www.fsf.org/licensing/licenses/lgpl.html'
servers:
  - url: 'https://api.encryptedweb.org/strongkeyliteWAR/rest'
tags:
  - name: Standard Operations
    description: Cryptographic operations performed on a per-transaction basis.
  - name: Miscellaneous
    description: Other operations.
paths:
  /encrypt:
    post:
      summary: Encrypt the supplied plaintext.
      description: This web service operation encrypts the value of "plaintext".
      tags:
        - Standard Operations
      operationId: encrypt
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - did
                - username
                - password
                - plaintext
              properties:
                did:
                  $ref: '#/components/schemas/did'
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
                plaintext:
                  $ref: '#/components/schemas/plaintext'
        required: true
      responses:
        '200':
          description: Returns a token that represents the encrypted data.
          content:
            text/plain:
              schema:
                type: string
              example: 1000000000000002
        '400':
          description: Invalid Input.
          content:
            text/plain:
              schema:
                type: string
              example: 'SKL-ERR-1003: NULL argument: did'
        '401':
          description: Invalid Authorization (username/password).
          content:
            text/html:
              schema:
                type: string
              example: This request requires HTTP authentication.
  /decrypt:
    post:
      summary: Decrypt the stored ciphertext.
      description: This web service operation decrypts ciphertext identified by the token and returns the plaintext.
      tags:
        - Standard Operations
      operationId: decrypt
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - did
                - username
                - password
                - token
              properties:
                did:
                  $ref: '#/components/schemas/did'
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
                token:
                  $ref: '#/components/schemas/token'
        required: true
      responses:
        '200':
          description: Returns the original plaintext stored during encryption.
          content:
            text/plain:
              schema:
                type: string
              example: Original plaintext
        '400':
          description: Invalid Input.
          content:
            text/plain:
              schema:
                type: string
              example: 'SKL-ERR-1003: NULL argument: did'
        '401':
          description: Invalid Authorization (username/password).
          content:
            text/html:
              schema:
                type: string
              example: This request requires HTTP authentication.
  /search:
    post:
      summary: Search for the supplied plaintext.
      description: This web service operation searches for plaintext that might exist within the database. If found, it returns the corresponding token or a zero (0) if not found. This web service uses HMACs to determine if the plaintext is stored. Because of this, this operation will only return a token for an exact match of the plaintext (not substrings).
      tags:
        - Standard Operations
      operationId: search
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - did
                - username
                - password
                - plaintext
              properties:
                did:
                  $ref: '#/components/schemas/did'
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
                plaintext:
                  $ref: '#/components/schemas/plaintext'
      responses:
        '200':
          description: Returns a token that represents the encrypted data.
          content:
            text/plain:
              schema:
                type: string
              example: 1000000000000002
        '400':
          description: Invalid Input.
          content:
            text/plain:
              schema:
                type: string
              example: 'SKL-ERR-1003: NULL argument: did'
        '401':
          description: Invalid Authorization (username/password).
          content:
            text/html:
              schema:
                type: string
              example: This request requires HTTP authentication.
  /delete:
    post:
      summary: Delete the stored ciphertext.
      description: This web service operation deletes ciphertext.
      tags:
        - Standard Operations
      operationId: delete
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - did
                - username
                - password
                - token
              properties:
                did:
                  $ref: '#/components/schemas/did'
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
                token:
                  $ref: '#/components/schemas/token'
      responses:
        '200':
          description: Returns the string "true" if the web service succeeded.
          content:
            text/plain:
              schema:
                type: string
              example: 'true'
        '400':
          description: Invalid Input.
          content:
            text/plain:
              schema:
                type: string
              example: 'SKL-ERR-1003: NULL argument: did'
        '401':
          description: Invalid Authorization (username/password).
          content:
            text/html:
              schema:
                type: string
              example: This request requires HTTP authentication.
        '404':
          description: The ciphertext identified by the provided token does not exist.
          content:
            text/html:
              schema:
                type: string
  /ping:
    post:
      summary: Verify that the tokenization server is up and running.
      description: |
        Connect to the server and attempt to encrypt and decrypt a well-known plaintext. Also returns some server information.
      tags:
        - Miscellaneous
      operationId: ping
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - did
                - username
                - password
              properties:
                did:
                  $ref: '#/components/schemas/did'
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Successfully pinged the server.
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Invalid Input.
          content:
            text/plain:
              schema:
                type: string
              example: 'SKL-ERR-1003: NULL argument: did'
        '401':
          description: Invalid Authorization (username/password).
          content:
            text/html:
              schema:
                type: string
              example: This request requires HTTP authentication.
  /entropy:
    post:
      summary: Get true random numbers
      description: |
        This web service operation recovers entropy from a bytebuffer filled by a hardware TRNG and returns the specified number of bytes to the calling application.
      tags:
        - Miscellaneous
      operationId: entropy
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - did
                - username
                - password
                - size
              properties:
                did:
                  $ref: '#/components/schemas/did'
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
                size:
                  $ref: '#/components/schemas/size'
      responses:
        '200':
          description: The random bytes displayed as Base64.
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Invalid Input.
          content:
            text/plain:
              schema:
                type: string
              example: 'SKL-ERR-1003: NULL argument: did'
        '401':
          description: Invalid Authorization (username/password).
          content:
            text/html:
              schema:
                type: string
              example: This request requires HTTP authentication.


components:
  schemas:
    did:
      description: The cryptographic domain ID.
      type: string
      maxLength: 5
      example: 1
    username:
      description: The user authorized to make this web service call.
      type: string
      example: all
    password:
      description: The password of the user authorized to make this web service.
      type: string
      format: password
      example: Abcd1234!
    plaintext:
      description: The text to be encrypted.
      type: string
      minLength: 1
      maxLength: 10000
      example: HelloWorld
    size:
      description: The number of bytes of entropy being requested.
      type: integer
      example: 64
    token:
      description: A string that represents the encrypted plaintext.
      type: integer
      minLength: 7
      maxLength: 64
      example: 1000000000000002
    encoding:
      description: The encoding used on passed data.
      type: string
      enum:
        - Base64
        - Hex
      default: Base64
    algorithm:
      description: The cryptographic algorithm to use.
      type: string
      default: AES
    iv:
      description: The initialization vector to be used.
      type: string
      minLength: 1
    aad:
      description: Additional authentication data.
      type: string
      minLength: 1
    ciphertext:
      description: The encrypted text.
      type: string
      minLength: 1
      maxLength: 12285
